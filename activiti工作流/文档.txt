activiti 自定义文档：

1. 在Activiti中，在创建核心的流程引擎对象时会自动建表。如果程序正常执行，mysql会自动建库，然后创建23张表

//手动变编写的方式
public class TestJunit {

@Test

public void createTable(){

ProcessEngineConfiguration pc=ProcessEngineConfiguration.createStandaloneInMemProcessEngineConfiguration();

pc.setJdbcUrl("jdbc:mysql://localhost:3306/activiti?useUnicode=true&characterEncoding=utf8");

pc.setJdbcDriver("com.mysql.jdbc.Driver");

pc.setJdbcUsername("root");

pc.setJdbcPassword("123");

pc.setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);

ProcessEngine en=pc.buildProcessEngine();

System.out.println(en);

}
}

//通过activiti配置文件的方式

添加并制定配置文件
在Actiiti5中定制流程必定会操作到数据库，如果都像上面那样写一大段代码会非常麻烦，所以我们可以把数据库连接配置写入配置文件。

在Activiti5的官方示例中并没有现成的配置文件，所以先得找到activiti-rest\WEB-INF\classes下有：

 

4.5.3.1：activiti-context.xml 改成 activiti.cfg.xml
一个类似spring结构的配置文件，清空内容后改名为activiti.cfg.xml，用来做流程引擎的相关配置。

按照上面代码配置ProcessEngineConfiguration对象，主要定义数据库的连接配置和建表策略，配置文件代码如下：

 

<beans xmlns="http://www.springframework.org/schema/beans"

xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"

xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"

xsi:schemaLocation="http://www.springframework.org/schema/beans 

http://www.springframework.org/schema/beans/spring-beans-2.5.xsd

http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd

http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

<bean id="processEngineConfiguration" class="org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration">

<property name="jdbcUrl" value="jdbc:mysql://localhost:3306/activiti" />

<property name="jdbcDriver" value="com.mysql.jdbc.Driver"/>

<property name="jdbcUsername" value="root"/>

<property name="jdbcPassword" value="123"/>

<property name="databaseSchemaUpdate" value="true"></property>

</bean>

</beans>

 
Java代码如下：

import org.activiti.engine.ProcessEngine;

import org.activiti.engine.ProcessEngineConfiguration;

import org.junit.Test;

public class TestJunit {

@Test

public void test2(){

ProcessEngine pe=ProcessEngineConfiguration.createProcessEngineConfigurationFromResource("activiti.cfg.xml")

.buildProcessEngine();

System.out.println(pe);

}
}

createProcessEngineConfigurationFromResource的参数值为我们添加的配置文件activiti.cfg.xml的名称，执行java代码，流程引擎对象创建成功运行后数据库会自动建表。


//将配置文件改名为 activiti.cfg.xml 后：getDefaultProcessEngine()方法默认加载classpath下面的 activiti.cfg.xml 文件，此方法获取工作流引擎对象更简单


java代码获取

package com.pb.common;

import org.activiti.engine.ProcessEngine;
import org.activiti.engine.ProcessEngineConfiguration;
import org.activiti.engine.ProcessEngines;
import org.junit.Test;

public class testActiviti {
	
	@Test
	public void test2(){
		ProcessEngine pe=ProcessEngines.getDefaultProcessEngine();
		System.out.println(pe);
	}
	
	
}

2. 有了流程引擎对象就可以产生各个service，service来操作数据库表

各个service 的作用：

RepositoryService      管理流程定义(仓库)

RuntimeService         执行管理，包括启动、推进、删除流程实例等操作

TaskService            任务管理

HistoryService         历史管理(执行完的数据的管理)

IdentityService        组织机构管理

FormService            一个可选服务，任务表单管理

ManagementService


*注：一个流程流程实例只有一个，执行对象可以有多个


3.工作流执行流程：

java代码:

package com.pb.common;

import java.util.List;

import org.activiti.engine.ProcessEngine;
import org.activiti.engine.ProcessEngines;
import org.activiti.engine.repository.Deployment;
import org.activiti.engine.runtime.ProcessInstance;
import org.activiti.engine.task.Task;
import org.junit.Test;

public class helloActiviti {

//部署流程定义影响的数据库表有：act_re_deployment 部署信息表 和  act_re_procdef 流程定义数据表 （此表存的是流程图和.bpmn文件）
	ProcessEngine pe=ProcessEngines.getDefaultProcessEngine();
	//部署流程定义
	@Test
	public void deploymentprocess(){
		Deployment deployment =pe.getRepositoryService().
				createDeployment().
				name("activiti入门程序").
				addClasspathResource("diagrams/leave.bpmn").
				addClasspathResource("diagrams/leave.png").
				deploy();
		System.out.println(deployment.getId());
		System.out.println(deployment.getName());
	}


//部署流程定义（zip方式部署）
	@Test
	public void deploymentprocesszip(){
		InputStream is=this.getClass().getClassLoader().getResourceAsStream("diagrams/helloworld.zip");
		ZipInputStream zis=new ZipInputStream(is);
		pe.getRepositoryService().createDeployment().name("zip方式部署流程定义").addZipInputStream(zis).deploy();
	}


//部署流程定义
		@Test
		public void deploymentprocesszip(){
			//获得输入流的三种方式
			//从classpath的根路径下加载指定名称文件
			
			//InputStream is=this.getClass().getClassLoader().getResourceAsStream("diagrams/ProcessVariable.bpmn");
			//InputStream is1=this.getClass().getClassLoader().getResourceAsStream("diagrams/ProcessVariable.png");
			
			//从当前包下加载指定名称的文件 当前包指的是：com.pb.common
			//InputStream is2=this.getClass().getResourceAsStream("ProcessVariable.bpmn");
			//InputStream is3=this.getClass().getResourceAsStream("ProcessVariable.png");
			
			//从classpath的根路径下加载指定名称文件
			InputStream is4=this.getClass().getResourceAsStream("/diagrams/ProcessVariable.bpmn");
			InputStream is5=this.getClass().getResourceAsStream("/diagrams/ProcessVariable.png");
			
			pe.getRepositoryService().createDeployment()
									 .name("流程定义变量")
									 .addInputStream("ProcessVariable.bpmn", is4)
									 .addInputStream("ProcessVariable.png", is5)
									 .deploy();
		}


	
	//启动流程定义

//启动流程实例 影响数据库表 act_ru_execution 运行时流程执行实例表  act_ru_identitylink 运行时流程人员表  act_ru_task 运行时任务节点表
//act_hi_actinst  历史节点表  act_hi_identitylink 历史流程人员表  act_hi_procinst 历史流程实例表 act_hi_taskinst 历史任务实例表
	
	@Test
	public void stsrtprocess(){
		//key值在act_re_procdef 流程定义数据表 也即是
		//画流程图时 Process 的id值

		ProcessInstance pi=pe.getRuntimeService().startProcessInstanceByKey("hollword");
		System.out.println(pi.getId());//流程实例id
		System.out.println(pi.getProcessDefinitionId());//流程定义id
	}
	
	//查询当前的个人任务
	//查询的数据库表是：act_ru_task 运行时任务节点表
	@Test
	public void selecttask(){
		List<Task> list=pe.getTaskService().createTaskQuery().taskAssignee("张三")//李四，王五
		.list();
		if(list!=null&&list.size()>0){
			for(Task task:list){
				System.out.println(task.getId());//任务id
				System.out.println(task.getName());//任务的名称
				System.out.println(task.getCreateTime());//任务的创建时间
				System.out.println(task.getAssignee());//任务办理人
				System.out.println(task.getProcessDefinitionId());//流程实例id
				System.out.println(task.getExecutionId());//任务的执行对象id
			
			}
		}
	}
	//完成我的任务
	//影响的数据库表  act_ru_task 运行时任务节点表 act_ru_identitylink 运行时流程人员表 act_hi_actinst  历史节点表 act_hi_identitylink 历史流程人员表
		//act_hi_taskinst 历史任务实例表
	@Test
	public void endTask(){
		pe.getTaskService().complete("l04");//202,302
		System.err.println("我的任务完成");
	}
}


//流程结束后 act_ru_execution 运行时流程执行实例表 act_ru_identitylink 运行时流程人员表 act_ru_task 运行时任务节点表 数据清空


    //查询流程定义（查询的功能很多这里只是做部分举例）

@Test
  public void findProcessDefinition(){
	  List<ProcessDefinition> list=pe.getRepositoryService().createProcessDefinitionQuery()//创建流程定义查询对象
	  						   //.deploymentId("")//使用部署对象id查询
	  						   //.processDefinitionId("")//使用流程定义对象id查询
	  						   //.processDefinitionKey("")//使用流程定义对象的key查询
	  						   //.processDefinitionNameLike("")//使用流程定义对象的名字模糊查询
	  						   .orderByProcessDefinitionVersion().asc()//使用流程定义对象的版本号排序
	  						   //.orderByProcessDefinitionName().desc()//使用流程定义对象的名字排序
	  						   .list();
	  						   //.singleResult()唯一结果集
	  							//.count()查询总记录数
	  							//.listPage(0, 0)
	  
	  for(ProcessDefinition processDefinition:list){
		   System.out.println(processDefinition.getId()+"\n"+ //流程定义的key+版本号+随机生成数
				  			 processDefinition.getName()+"\n"+//对应bpmn文件中的name值
				  			 processDefinition.getKey()+"\n"+//对应bpmn文件中的id值
				  			processDefinition.getResourceName()+"\n"+//资源文件名称
				  			processDefinition.getVersion()//当流程定义的key相同的情况下版本升级
				  );
		  					 
		  
		  
	  }
  }




 //删除流程定义

//删除流程定义
	public void deleteProcessDefinition(){
			String deploymentid="1";

			pe.getRepositoryService().deleteDeployment(deploymentid);//不带级联的删除（只能删除没有启动的流程，如果流程启动就会抛出异常）
			pe.getRepositoryService().deleteDeployment(deploymentid, true);//带级联的删除
			System.out.println("删除成功");
		
	}


//查看流程图
	
	public void viewProcessDefinition() throws IOException{
		String deploymentid="1";
		List<String> list=pe.getRepositoryService().getDeploymentResourceNames(deploymentid);
		String resourcesname="";
		if(list!=null&&list.size()>0){
			for(String name:list){
				if(name.indexOf(".png")>=0){
					resourcesname=name;
				}
			}
		}
		
		//获取流程图的输入流
		InputStream is=pe.getRepositoryService().getResourceAsStream(deploymentid, resourcesname);
		
		File file =new File("D:/"+resourcesname);
		
		FileUtils.copyInputStreamToFile(is, file);
		
		//将图片生成到d盘之后再在页面加载图片就可以了
	}

//流程定义没有真正的修改操作

修改的解决方案就是重新部署流程通过流程定义的key启动（也就是每次启动都是最新版本）



//查看最新版本的流程定义

	public void selectnewProcessDefinition(){
		List<ProcessDefinition> list=pe.getRepositoryService().createProcessDefinitionQuery().orderByProcessDefinitionVersion().asc().list();
		//LikedHashMap是有序的
		Map<String,ProcessDefinition>map=new LinkedHashMap<String,ProcessDefinition>();
		
		if(list!=null&&list.size()>0){
			
			for(ProcessDefinition pd:list){
				
				map.put(pd.getKey(), pd);
			}
			
		}
		//map集合转成list集合
		List<ProcessDefinition>pdlist=new ArrayList<ProcessDefinition>(map.values());
		
		for(ProcessDefinition processDefinition:pdlist){
			  System.out.println(processDefinition.getId()+"\n"+ //流程定义的key+版本号+随机生成数
					  			 processDefinition.getName()+"\n"+//对应bpmn文件中的name值
					  			 processDefinition.getKey()+"\n"+//对应bpmn文件中的id值
					  			processDefinition.getResourceName()+"\n"+//资源文件名称
					  			processDefinition.getVersion()//当流程定义的key相同的情况下版本升级
					  );
			  			
		  }
	
	}


//删除key相同的所有不同版本的流程定义
	public void deleteversionProcessDefinition(){
		String processDefinitionKey="hollword";
		List<ProcessDefinition>list=pe.getRepositoryService().createProcessDefinitionQuery().processDefinitionKey(processDefinitionKey).list();
		
		for(ProcessDefinition pd:list){
			
			//pe.getRepositoryService().deleteDeployment(pd.getDeploymentId());
			pe.getRepositoryService().deleteDeployment(pd.getDeploymentId(), true);
			
		}
	}


//设置流程定义变量
		@Test
		//影响的表act_ru_variable，act_hi_varinst
		public void setVariable(){
			TaskService ts=pe.getTaskService();
			//不使用Local后一次设置值会覆盖前一次的值
			//ts.setVariableLocal("604", "请假天数", 3);//与当前任务绑定act_ru_variable表中8task_id有值，就只有当前能看到
			//ts.setVariable("604", "请假日期", new Date());
			//ts.setVariable("604", "请假原因", "回家探亲");
			//使用bean必须实现序列化，要求bean属性不能再改变，否则抛出异常，添加固定版本号
			Leave leave=new Leave();
				leave.setLeaveday(3);
				leave.setLeavedate(new Date());
				leave.setLeavereason("想回家看看");
			ts.setVariable("1004", "人员信息", leave);
			
			System.out.println("设置变量成功");	
		}
		
		//获取流程定义变量
		@Test
	public void getVariable(){
		TaskService ts=pe.getTaskService();
		/*Integer day=(Integer) ts.getVariable("802", "请假天数");
		Date date=(Date) ts.getVariable("802", "请假日期");
		String str=(String) ts.getVariable("802", "请假原因");*/
		
		Leave leave=(Leave) ts.getVariable("1004", "人员信息");
		
		System.out.println("请假天数："+leave.getLeaveday());
		System.out.println("请假日期："+leave.getLeavedate());
		System.out.println("请假原因："+leave.getLeavereason());
		
	}
	
	//模拟设置和获取流程定义变量
	
	public void setandgetVariable(){
		//与流程实例，执行对象（正在执行）
		RuntimeService rs=pe.getRuntimeService();
		//与任务相关的（正在执行的）
		TaskService ts=pe.getTaskService();
		
		//设置流程变量(使用执行对象id,和流程变量名称，设置流程变量的值，一次只能设置一个值)
		//rs.setVariable(arg0, arg1, arg2);
		//Map集合的key就是流程变量的名称，value就是流程变量的值
		//rs.setVariables(arg0, arg1);
		
		//设置流程变量(使用执行对象id,和流程变量名称，设置流程变量的值，一次只能设置一个值)
		//ts.setVariable(arg0, arg1, arg2);
		//Map集合的key就是流程变量的名称，value就是流程变量的值
		//ts.setVariables(arg0, arg1);
		
		//rs.startProcessInstanceById(arg0, arg1);//启动流程实例的同事可设置流程变量，用Map集合
		//ts.complete(arg0, arg1);//完成任务设置流程变量.用Map集合
	
		//rs.getVariable(arg0, arg1);使用执行对象id和流程变量名称，获取流程变量
		//rs.getVariables(arg0);使用执行对象id，获取所有流程变量，将流程变量放置到map集合中
		//rs.getVariables(arg0, arg1); 使用执行对象id,获取流程变量值，通过设置流程变量的名称存放到集合中，获取指定流程变量名称的流程变量值存放到map集合中
		
		//ts.getVariable(arg0, arg1);使用任务id和流程变量名称，获取流程变量
		//ts.getVariables(arg0);使用任务id，获取所有流程变量，将流程变量放置到map集合中
		//ts.getVariables(arg0, arg1); 使用任务id,获取流程变量值，通过设置流程变量的名称存放到集合中，获取指定流程变量名称的流程变量值存放到map集合中
		
		
	}
			


